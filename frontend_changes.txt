Shipping Batch 5 — Glossary tooltips inline

What’s included

- GlossaryTip component (accessible tooltip)
- glossary.ts with short, consistent definitions
- Inline wiring on Tools pages for key terms

1) Glossary data

File: src/lib/glossary.ts

export const GLOSSARY: Record<string, string> = {

'range band': 'Floor–Median–Ceiling. Three-point summary of uncertainty for a player this week.',

'coverage': 'How often outcomes fall inside the predicted band. Higher coverage = better-calibrated ranges.',

'driver chip': 'A short, confidence-gated reason that nudges a projection. Max 2 visible, conf ≥ 0.65.',

'trust snapshot': 'Freshness and status badge. Shows last refresh and when stale mode is active.',

'faab band': 'Suggested min, likely, and max bids for the waiver wire, based on opportunity and dispersion.',

'risk modes': 'Protect, Neutral, or Chase. Changes how the Start/Sit tie-breaker weights floor vs ceiling.',

};

2) Accessible tooltip

File: src/components/GlossaryTip.tsx

'use client';

import { useId, useState } from 'react';

import { GLOSSARY } from '@/lib/glossary';

type Props = {

term: keyof typeof GLOSSARY | string;

children?: React.ReactNode;

className?: string;

};

export default function GlossaryTip({ term, children, className = '' }: Props) {

const id = useId();

const [open, setOpen] = useState(false);

const label = typeof term === 'string' ? term : String(term);

const text = GLOSSARY[label.toLowerCase()] ?? '';

return (

{children ?? label}

</span>

<button

className="cv-btn-ghost text-xs px-2 py-1"

aria-describedby={open ? id : undefined}

aria-expanded={open}

aria-label={`Definition: ${label}`}

onClick={() => setOpen(o => !o)}

onMouseEnter={() => setOpen(true)}

onMouseLeave={() => setOpen(false)}

> 
> 
> 
> ?
> 

</button>

{open && text && (

<span

id={id}

role="tooltip"

className="z-50 ml-1 rounded border bg-white px-2 py-1 text-xs text-gray-800 shadow"

> 
> 
> 
> {text}
> 

</span>

)}

</span>

);

}

3) Wire into Tools pages

Start/Sit (app/tools/start-sit/page.tsx)

- Near the title or inputs:

import GlossaryTip from '@/components/GlossaryTip';

// …

<h1 className="h1">

Start / Sit Tie‑Breaker

<GlossaryTip term="risk modes" />

</span>

</h1>

- Near the ribbons or results:

<p className="text-sm text-muted">

<GlossaryTip term="range band" /> · <GlossaryTip term="driver chip" />

</p>

FAAB (app/tools/faab/page.tsx)

- Next to the “Band (USD)” label:

<h3 className="font-semibold">

FAAB Bid Helper <GlossaryTip term="faab band" />

</h3>

Decisions (app/tools/decisions/page.tsx)

- Under the title:

<p className="text-sm text-muted">

<GlossaryTip term="driver chip" /> · <GlossaryTip term="coverage" />

</p>

Trust badge (if shown on each tool page)

- Near TrustSnapshot or freshness text:

<p className="text-xs text-muted">

<GlossaryTip term="trust snapshot" />

</p>

4) Visual tweaks (optional)

- Tooltip container uses white background. Add a dark mode style if desired:

In globals.css:

.dark [role="tooltip"] { background: #0f172a; color: #e5e7eb; border-color: rgba(255,255,255,.12); }

5) Acceptance (Batch 5)

- GlossaryTip renders underlined term with a “?” button
- Hover or click shows a small tooltip with a concise definition
- Keyboard and screen readers read the definition via aria-describedby/role="tooltip"
- Wired terms visible on Start/Sit, FAAB, and Decisions pages
- No console errors; tooltip positions well and respects dark mode

Shipping Batch 6 — Toast + copy buttons

What’s included

- Reusable toast hook for lightweight confirmations
- “Copy summary” in Start/Sit
- “Copy bid” buttons in FAAB upgraded to show toasts
- Small utility to build readable summaries

1) Toast hook

File: src/components/Toast.tsx

'use client';

import { useEffect, useState } from 'react';

export function useToast() {

const [msg, setMsg] = useState<string|null>(null);

useEffect(() => {

if (!msg) return;

const t = setTimeout(() => setMsg(null), 1800);

return () => clearTimeout(t);

}, [msg]);

const Toast = () => msg ? (

<div

role="status"

aria-live="polite"

className="fixed bottom-4 right-4 rounded bg-black text-white px-3 py-2 text-xs shadow"

> 
> 
> 
> {msg}
> 

</div>

) : null;

return { setMsg, Toast };

}

2) Summary builder

File: src/lib/summary.ts

import { type Row } from '@/lib/tools';

export function startSitSummary(a: Row, b: Row, risk: 'protect'|'neutral'|'chase', winner: string) {

const fmt = (r: Row) => `(${r.range.p10.toFixed(1)}–${r.range.p50.toFixed(1)}–${r.range.p90.toFixed(1)})`;

return `Start ${winner} — risk ${risk}. ${a.player_name} ${fmt(a)} vs ${b.player_name} ${fmt(b)}.`;

}

export function faabSummary(name: string, min: number, likely: number, max: number) {

return `FAAB for ${name}: min $${min}, likely $${likely}, max $${max}.`;

}

3) Start/Sit: “Copy summary” button

Edit: app/tools/start-sit/page.tsx

- Imports:

import { useToast } from '@/components/Toast';

import { startSitSummary } from '@/lib/summary';

- Inside component:

const { setMsg, Toast } = useToast();

- In the results section (after recommendation), add:

<div className="mt-3 flex items-center gap-2">

<button

className="cv-btn-ghost"

onClick={() => {

const s = startSitSummary([res.pa](http://res.pa), res.pb, risk, res.rec);

navigator.clipboard.writeText(s);

setMsg('Summary copied');

}}

> 
> 
> 
> Copy summary
> 

</button>

</div>

- Render Toast near the end of the component JSX:

<Toast />

4) FAAB: upgrade copy buttons to show toast

Edit: app/tools/faab/page.tsx

- Imports:

import { useToast } from '@/components/Toast';

import { faabSummary } from '@/lib/summary';

- In component:

const { setMsg, Toast } = useToast();

- Replace copyBid with:

function copyBid(x: number, label: 'Min'|'Likely'|'Max') {

navigator.clipboard.writeText(String(x));

setMsg(`${label} bid copied`);

}

- Add a “Copy all”:

{out && (

<button

className="cv-btn-ghost"

onClick={() => {

const s = faabSummary([out.pa](http://out.pa).player_name, [out.band](http://out.band).min, [out.band](http://out.band).likely, [out.band](http://out.band).max);

navigator.clipboard.writeText(s);

setMsg('FAAB summary copied');

}}

> 
> 
> 
> Copy all
> 

</button>

)}

- Render Toast at bottom of component JSX:

<Toast />

5) Decisions (optional quick copy)

In app/tools/decisions/page.tsx inside each list item:

<button

className="cv-btn-ghost text-xs"

onClick={() => {

const r = d.row;

const s = `${r.player_name} — ${r.range.p10.toFixed(1)}–${r.range.p50.toFixed(1)}–${r.range.p90.toFixed(1)}; reasons: ${[d.chips.map](http://d.chips.map)((c:any)=>c.component).slice(0,2).join(', ') || '—'}`;

navigator.clipboard.writeText(s);

}}

> 
> 
> 
> Copy
> 

</button>

6) Accessibility notes

- Toast uses role="status" and aria-live="polite" for SR announcement
- Buttons are standard <button> with clear labels
- Keep toast messages short (under 80 chars)

Acceptance (Batch 6)

- Start/Sit “Copy summary” copies a single-line recommendation and shows “Summary copied”
- FAAB “Min/Likely/Max” and “Copy all” show appropriate toast messages
- No console errors; toasts disappear automatically after ~1.8s
- Works in dark and light modes


Great—continuing with Batch 7: Empty states + example fillers

What’s included

- Friendly empty states across tools
- “Try an example” buttons that prefill valid inputs
- Small helper to pick stable sample players from projections

1) Example picker helper

File: src/lib/examples.ts

import { type Row } from '@/lib/tools';

export function pickExamples(rows: Row[], n = 2): Row[] {

// Choose two popular names with distinct positions if possible

const sorted = [...rows].sort((a,b) => (b.expected_points ?? 0) - (a.expected_points ?? 0));

const first = sorted[0];

const second = sorted.find(r => r.player_name !== first?.player_name) || sorted[1];

return [first, second].filter(Boolean) as Row[];

}

2) EmptyState component (already added earlier, but here’s the final version)

File: src/components/EmptyState.tsx

export default function EmptyState({

title,

children,

onExample,

}: {

title: string;

children?: React.ReactNode;

onExample?: () => void;

}) {

return (

<div className="rounded border p-6 text-sm text-gray-600 bg-white">

<p className="font-medium text-gray-800 mb-2">{title}</p>

{children && <p className="mb-3">{children}</p>}

{onExample && (

<button className="cv-btn-ghost" onClick={onExample}>

Try an example

</button>

)}

</div>

);

}

3) Start/Sit: show empty state + prefill example pair

Edit: app/tools/start-sit/page.tsx

- Imports:

import EmptyState from '@/components/EmptyState';

import { pickExamples } from '@/lib/examples';

- After suggestions load, when no inputs and no result yet:

{!res && !a && !b && suggestions.length > 0 && (

<EmptyState

title="Compare two players"

onExample={() => {

const [x, y] = pickExamples(suggestions);

if (x?.player_name) setA(x.player_name);

if (y?.player_name) setB(y.player_name);

}}

> 
> 
> 
> Type a name or try an example pair to see ranges, reasons, and a recommendation.
> 

</EmptyState>

)}

4) FAAB: empty state + example fill

Edit: app/tools/faab/page.tsx

- Imports:

import EmptyState from '@/components/EmptyState';

import { pickExamples } from '@/lib/examples';

- Above the results section:

{!out && !name && suggestions?.length > 0 && (

<EmptyState

title="Get a FAAB bid band"

onExample={() => {

const [x] = pickExamples(suggestions, 1);

if (x?.player_name) setName(x.player_name);

}}

> 
> 
> 
> Enter a player and your remaining budget, or try a sample.
> 

</EmptyState>

)}

5) Decisions: empty state guidance

Edit: app/tools/decisions/page.tsx

- Import EmptyState:

import EmptyState from '@/components/EmptyState';

- Replace the “No decisions” line with:

{res && res.length === 0 && (

<EmptyState

title="No decisions surfaced"

onExample={() => {

// Simple nudge: flip risk once to see a different slice

setRisk(prev => (prev === 'neutral' ? 'chase' : 'neutral'));

}}

> 
> 
> 
> Try switching risk, or refresh. This view shows only high-priority items.
> 

</EmptyState>

)}

6) Optional: example pill buttons

If you prefer visible suggestions, add under Start/Sit inputs:

<div className="flex flex-wrap gap-2 text-xs text-muted">

<button className="cv-btn-ghost" onClick={() => { setA('Patrick Mahomes'); setB('Josh Allen'); }}>

Mahomes vs Allen

</button>

<button className="cv-btn-ghost" onClick={() => { setA('CeeDee Lamb'); setB('Amon-Ra St. Brown'); }}>

Lamb vs Amon-Ra

</button>

</div>

Acceptance (Batch 7)

- Start/Sit shows a friendly empty state with “Try an example” that pre-fills two players and enables Compare
- FAAB shows an empty state that pre-fills a player name
- Decisions shows a helpful empty state that suggests switching risk and provides a one-click toggle
- No console errors; all buttons are keyboard accessible and styled with tokens

Want me to proceed with Batch 8 (Accessibility + keyboard refinements) or Batch 9 (Privacy + 500 error pages) next?


Shipping Batch 8 — Accessibility + keyboard refinements

What’s included

- Global skip link and landmark roles
- Better focus, labels, and aria for interactive widgets
- Keyboard traps fixed for drawer and menus
- Enter/Escape behavior standardized
- Reduced-motion-safe animations

1) Global: skip link + landmarks

- File: src/app/layout.tsx (inside <body> top)

<a href="#main" className="sr-only focus:not-sr-only focus:fixed focus:top-2 focus:left-2 focus:bg-white focus:text-black focus:px-3 focus:py-1 focus:rounded">

Skip to main content

</a>

<header role="banner">{/ *Header* /}</header>

<main id="main" role="main">{children}</main>

<footer role="contentinfo">{/ *Footer* /}</footer>

- File: src/app/globals.css (screen-reader utility if not present)

.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}

.focus:not-sr-only:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto;white-space:normal}

2) Header: mobile menu a11y

- File: src/components/Header.tsx
- Add aria-controls and aria-expanded to menu button. Ensure drawer has role and id.

<button

className="md:hidden cv-btn-ghost"

aria-label="Open menu"

aria-controls="site-mobile-menu"

aria-expanded={isOpen}

onClick={() => document.documentElement.classList.toggle('menu-open')}

> ☰</button>
> 

<div

id="site-mobile-menu"

role="dialog"

aria-modal="true"

className={`md:hidden border-t bg-white transition-[max-height] duration-200 overflow-hidden ${isOpen ? 'max-h-96' : 'max-h-0'}`}

> 
> 
> 
> {/ *links* /}
> 

</div>

- Close on Escape globally when open:

useEffect(() => {

function onKey(e: KeyboardEvent){ if (e.key==='Escape') document.documentElement.classList.remove('menu-open'); }

window.addEventListener('keydown', onKey);

return ()=>window.removeEventListener('keydown', onKey);

}, []);

3) Command Palette: ARIA roles

- File: src/components/CommandPalette.tsx
- Add role, label, and focus management.

{open && (

<div className="fixed inset-0 z-50 bg-black/40" onClick={()=>setOpen(false)} role="dialog" aria-modal="true" aria-label="Command palette">

<div className="mx-auto mt-24 max-w-lg rounded-lg bg-white p-3 shadow" onClick={e=>e.stopPropagation()}>

<input

autoFocus

placeholder="Type a command…"

className="w-full border rounded p-2 mb-2"

role="combobox"

aria-expanded="true"

aria-autocomplete="list"

aria-controls="cmd-list"

/>

<ul id="cmd-list" role="listbox" className="max-h-64 overflow-auto">

{/ *each item: role="option", aria-selected* /}

</ul>

<div className="mt-2 text-xs text-gray-500">Press Esc to close</div>

</div>

</div>

)}

4) PlayerDrawer: improvements

- File: src/components/PlayerDrawer.tsx
- Add aria-labelledby for the title, set initial focus to close button (or heading), and set inert background (optional).

const titleId = useId();

// In header:

<h2 id={titleId} className="text-lg font-semibold">…</h2>

// On container:

<div

ref={panelRef}

tabIndex={-1}

aria-labelledby={titleId}

// …

/>

5) ColumnToggle: menu roles

- File: src/components/ColumnToggle.tsx

<button … aria-haspopup="menu" aria-controls="column-menu" aria-expanded={open}>Columns</button>

{open && (

<div id="column-menu" role="menu" className="absolute right-0 mt-2 w-56 rounded border bg-white p-2 shadow z-20">

<div className="text-xs text-gray-600 px-1 pb-1">Show or hide columns</div>

<ul role="none">

{[columns.map](http://columns.map)(c => (

<li key={c.key} role="none" className="flex items-center justify-between px-1 py-1">

<label className="text-sm" htmlFor={`col-${c.key}`}>{c.label}</label>

<input id={`col-${c.key}`} type="checkbox" … />

</li>

))}

</ul>

</div>

)}

6) Keyboard behavior standardization

- Start/Sit page
    - Enter anywhere triggers Compare
    - 1,2,3 switch risk modes (already added)

useEffect(() => {

const onKey=(e:KeyboardEvent)=>{

if(e.key==='Enter') run();

if(e.key==='1') setRisk('protect');

if(e.key==='2') setRisk('neutral');

if(e.key==='3') setRisk('chase');

};

window.addEventListener('keydown', onKey);

return ()=>window.removeEventListener('keydown', onKey);

}, [run]);

- FAAB page
    - Enter on number or name triggers Get bid band:

useEffect(()=> {

const onKey=(e:KeyboardEvent)=> { if(e.key==='Enter') run(); };

window.addEventListener('keydown', onKey);

return ()=>window.removeEventListener('keydown', onKey);

}, [run]);

7) Reduced motion-safe animations

- File: src/app/globals.css (expand earlier rule with opacity/transform safeguards)

@media (prefers-reduced-motion: reduce) {

.animate-pulse, .transition, .duration-200, .duration-300 { animation: none !important; transition: none !important; }

}

8) Color contrast and labels

- Ensure all icon-only buttons have aria-label (e.g., menu, close, +Watch).
- Verify brand greens meet AA contrast on white (deep green does; accent lime used on text should be limited—use on backgrounds with dark text)

9) Focus outline consistency on custom components

- Add focus-visible outlines to .cv-btn-primary/.cv-btn-secondary/.cv-btn-ghost in globals.css:

.cv-btn-primary:focus-visible,.cv-btn-secondary:focus-visible,.cv-btn-ghost:focus-visible{

outline:2px solid var(--cv-accent); outline-offset:2px;

}

10) Forms: associate labels with inputs

- Add <label htmlFor="…"> where missing on inputs in Start/Sit and FAAB

<label htmlFor="playerA" className="text-xs text-muted">Player A</label>

<input id="playerA" … />

Acceptance (Batch 8)

- Skip link appears when tabbing and moves focus to main
- Header menu and command palette announce as dialogs and close via Esc
- Column menu toggles are labeled and keyboard usable
- Drawer has a labeled title and traps focus without dead-ends
- Enter triggers actions on Start/Sit and FAAB; risk hotkeys are active
- Reduced motion preference respected; no unnecessary animations
- All icon-only buttons have aria-label and receive visible focus

If you want me to proceed, I’ll ship Batch 9: Privacy and 500 error pages.

Shipping Batch 9 — Privacy and 500 error pages

What’s included

- Privacy page with plain-language policy stub
- 500 error boundary page with friendly recovery links

1) Privacy page

File: src/app/privacy/page.tsx

'use client';

export default function PrivacyPage() {

return (

<main className="container section space-y-4">

<h1 className="h1">Privacy</h1>

<p className="text-sm text-muted">

We keep data collection minimal to run the product and improve reliability.

</p>

<section className="rounded border bg-white p-4 space-y-2">

<h2 className="h2">What we collect</h2>

<ul className="list-disc pl-5 text-sm">

<li>Basic usage analytics (page views, feature use) without sensitive content</li>

<li>Operational logs (request_id, route, response time) for reliability</li>

<li>OAuth profile basics if you sign in (name, email, provider id)</li>

</ul>

</section>

<section className="rounded border bg-white p-4 space-y-2">

<h2 className="h2">What we do not collect</h2>

<ul className="list-disc pl-5 text-sm">

<li>No passwords (handled by your provider)</li>

<li>No payment details unless you enable payments (Stripe handles card data)</li>

<li>No personal notes or league chat content</li>

</ul>

</section>

<section className="rounded border bg-white p-4 space-y-2">

<h2 className="h2">Control and export</h2>

<ul className="list-disc pl-5 text-sm">

<li>Request export or deletion any time: [trust@customvenom.com](mailto:trust@customvenom.com)</li>

<li>Turn off analytics in Settings (when available)</li>

<li>OAuth unlink in Settings (when available)</li>

</ul>

</section>

<div className="flex gap-2">

<a href="/" className="cv-btn-ghost">Home</a>

<a href="/projections" className="cv-btn-primary">Open Projections</a>

</div>

</main>

);

}

2) 500 error boundary (App Router)

File: src/app/error.tsx

'use client';

import { useEffect } from 'react';

export default function GlobalError({

error,

reset,

}: {

error: Error & { digest?: string };

reset: () => void;

}) {

useEffect(() => {

// Optional: send to your logger here

// console.error(error);

}, [error]);

return (

<html>

<body>

<main className="container section space-y-4">

<h1 className="h1">Something went wrong</h1>

<p className="text-sm text-muted">We hit an unexpected error. Try again or visit another page.</p>

<div className="rounded border bg-white p-4 text-sm">

<div className="text-xs text-muted">Error digest</div>

<code className="block mt-1 text-[11px] overflow-auto">

{error?.digest ?? 'n/a'}

</code>

</div>

<div className="flex flex-wrap gap-2">

<button onClick={() => reset()} className="cv-btn-primary">Try again</button>

<a href="/projections" className="cv-btn-ghost">Projections</a>

<a href="/tools" className="cv-btn-ghost">Tools</a>

<a href="/ops" className="cv-btn-ghost">Ops</a>

<a href="/privacy" className="cv-btn-ghost">Privacy</a>

</div>

</main>

</body>

</html>

);

}

3) Optional: not-found page (if not already added)

File: src/app/not-found.tsx

export default function NotFound() {

return (

<main className="container section">

<h1 className="h1">Page not found</h1>

<p className="text-sm text-muted mt-2">Try the Tools hub or Projections.</p>

<div className="mt-4 flex gap-2">

<a href="/tools" className="cv-btn-primary">Open Tools</a>

<a href="/projections" className="cv-btn-ghost">Projections</a>

</div>

</main>

);

}

Acceptance (Batch 9)

- Visiting /privacy renders the policy stub with clear sections and links back to main pages
- Crashing any client component shows the error boundary with Try again and route links
- Not found routes render a friendly 404 (if added)
- No console errors; styles follow brand tokens and container spacing

If you want, I can follow with a micro “Ops status” footer badge and a /status page scaffold that reads /ops-data for a tiny public status panel.

Here’s a tiny “Ops status” addition: a footer badge that reflects API health, plus a simple public /status page that reads /ops-data.

1) Footer badge

- File: src/components/OpsStatus.tsx

'use client';

import { useEffect, useState } from 'react';

type Ops = {

cache?: { rate?: number };

coverage?: { overall?: number };

pinball?: { overall?: number };

};

export default function OpsStatus({ api = [process.env.NEXT](http://process.env.NEXT)_PUBLIC_API_BASE }: { api?: string }) {

const [ok, setOk] = useState<boolean | null>(null);

const [rate, setRate] = useState<number | null>(null);

useEffect(() => {

let alive = true;

async function load() {

try {

const res = await fetch(`${api}/ops-data`, { cache: 'no-store' });

setOk(res.ok);

const data: Ops = await res.json().catch(() => ({} as Ops));

if (!alive) return;

setRate(data?.cache?.rate ?? null);

} catch {

if (!alive) return;

setOk(false);

}

}

load();

const id = setInterval(load, 60_000); // refresh each minute

return () => { alive = false; clearInterval(id); };

}, [api]);

const label = ok === null ? 'Checking…' : ok ? 'OK' : 'Degraded';

const color = ok === null ? 'bg-gray-300' : ok ? 'bg-[var(--cv-primary)]' : 'bg-[#DC2626]';

const cache = rate != null ?  `· cache ${(rate*100).toFixed(0)}%` : '';

return (

API {label}{cache}

</span>

);

}

- File: src/components/Footer.tsx (use it)

import OpsStatus from '@/components/OpsStatus';

// …

<div className="mx-auto max-w-6xl p-4 text-xs text-gray-600 flex flex-wrap items-center justify-between gap-3">

<div className="flex items-center gap-3">

<div>© {new Date().getFullYear()} Custom Venom · Pick Your Poison</div>

<OpsStatus />

</div>

<nav className="flex flex-wrap gap-3">

<a href="/ops" className="hover:underline">Ops</a>

<a href="/status" className="hover:underline">Status</a>

<a href="/design-preview" className="hover:underline">Design</a>

<a href="/privacy" className="hover:underline">Privacy</a>

</nav>

</div>

2) Public status page

- File: src/app/status/page.tsx

'use client';

import { useEffect, useState } from 'react';

type Ops = {

cache?: { hits?: number; total?: number; rate?: number };

coverage?: { QB?: number; RB?: number; WR?: number; TE?: number; overall?: number };

pinball?: { overall?: number };

chips?: { speak?: number; suppress?: number };

};

export default function StatusPage() {

const [data, setData] = useState<Ops | null>(null);

const [err, setErr] = useState<string | null>(null);

const api = [process.env.NEXT](http://process.env.NEXT)_PUBLIC_API_BASE!;

useEffect(() => {

let alive = true;

async function load() {

try {

setErr(null);

const res = await fetch(`${api}/ops-data`, { cache: 'no-store' });

const json: Ops = await res.json();

if (!alive) return;

setData(json);

} catch (e: any) {

if (!alive) return;

setErr('Unable to load status right now.');

}

}

load();

const id = setInterval(load, 60_000);

return () => { alive = false; clearInterval(id); };

}, [api]);

return (

<main className="container section space-y-4">

<h1 className="h1">System Status</h1>

<p className="text-sm text-muted">Live snapshot from API ops metrics. Refreshes every 60 seconds.</p>

{err && <div className="rounded border bg-white p-3 text-sm text-red-700">{err}</div>}

{!data && !err && (

<div className="rounded border bg-white p-3 text-sm">Loading…</div>

)}

{data && (

<div className="grid gap-3 sm:grid-cols-2 lg:grid-cols-3">

<div className="rounded border bg-white p-3">

<div className="text-xs text-muted">Cache hit rate</div>

<div className="text-lg font-semibold">

{data.cache?.rate != null ? `${(data.cache.rate*100).toFixed(0)}%` : '—'}

</div>

<div className="text-xs text-muted">

Hits {data.cache?.hits ?? '—'} / {data.cache?.total ?? '—'}

</div>

</div>

<div className="rounded border bg-white p-3">

<div className="text-xs text-muted">Coverage (overall)</div>

<div className="text-lg font-semibold">

{data.coverage?.overall != null ? `${data.coverage.overall}%` : '—'}

</div>

<div className="text-xs text-muted">

QB {data.coverage?.QB ?? '—'} · RB {data.coverage?.RB ?? '—'} · WR {data.coverage?.WR ?? '—'} · TE {data.coverage?.TE ?? '—'}

</div>

</div>

<div className="rounded border bg-white p-3">

<div className="text-xs text-muted">Pinball loss</div>

<div className="text-lg font-semibold">

{data.pinball?.overall != null ? data.pinball.overall.toFixed(2) : '—'}

</div>

<div className="text-xs text-muted">Lower is better</div>

</div>

<div className="rounded border bg-white p-3">

<div className="text-xs text-muted">Chips: speak / suppress</div>

<div className="text-lg font-semibold">

{data.chips?.speak ?? '—'} / {data.chips?.suppress ?? '—'}

</div>

<div className="text-xs text-muted">UI clamp and confidence rules enforced</div>

</div>

</div>

)}

<div className="flex gap-2">

<a href="/projections" className="cv-btn-primary">Open Projections</a>

<a href="/tools" className="cv-btn-ghost">Tools</a>

</div>

</main>

);

}

3) Optional: small badge color tokens (already handled by brand tokens)

- The OpsStatus dot uses brand primary or error red; no extra tokens needed.

Acceptance

- Footer shows API OK/Degraded with live cache rate
- /status page loads /ops-data and renders key tiles
- Refresh every 60s
- No console errors; dark/light modes work

Want a tiny “stale” indicator on the footer badge when /projections returns x-stale=true? I can add that too.



