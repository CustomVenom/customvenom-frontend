name: Notion Sync

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  schedule:
    - cron: "*/30 * * * *"   # optional: every 30 min for DB sync (remove if not needed)
  workflow_dispatch: {}

permissions:
  contents: write

env:
  API_BASE_STAGING: ${{ vars.API_BASE_STAGING }}   # optional (frontend/API tests)

jobs:
  notion:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1) Presence check (names only, never echo values)
      - name: Verify required secrets (names only)
        shell: bash
        run: |
          set -euo pipefail
          echo "HAS_GITHUB_TOKEN=${GITHUB_TOKEN:+yes}"
          echo "HAS_NOTION_TOKEN=${NOTION_TOKEN:+yes}"
          echo "HAS_NOTION_PAGE_ID=${NOTION_PAGE_ID:+no}"
          echo "HAS_NOTION_DATABASE_ID=${NOTION_DATABASE_ID:+no}"
          missing=()
          # Always require NOTION_TOKEN for any Notion op
          [ -z "${NOTION_TOKEN:-}" ] && missing+=("NOTION_TOKEN")
          # For PR posting, require PAGE_ID only on pull_request events
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            [ -z "${NOTION_PAGE_ID:-}" ] && missing+=("NOTION_PAGE_ID")
          fi
          # For schedule/manual DB sync, require DATABASE_ID only then
          if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            [ -z "${NOTION_DATABASE_ID:-}" ] && missing+=("NOTION_DATABASE_ID")
          fi
          if [ "${#missing[@]}" -gt 0 ]; then
            echo "::error::Missing required secrets: ${missing[*]}"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_PAGE_ID: ${{ secrets.NOTION_PAGE_ID }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}

      # 2) PR → Notion status post (runs only for pull_request)
      - name: Post PR status to Notion page (PR only)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          set -euo pipefail
          STATE="${{ github.event.pull_request.state }}"   # open | closed
          MERGED="${{ github.event.pull_request.merged }}"  # true/false
          if [ "$STATE" = "closed" ] && [ "$MERGED" = "true" ]; then STATUS="Merged"
          elif [ "$STATE" = "closed" ]; then STATUS="Closed"
          else STATUS="Open"; fi
          BODY=$(cat <<'JSON'
          {
            "children": [
              { "paragraph": { "rich_text": [{ "type":"text","text":{"content":"Repo: REPO • STATUS"}}] } },
              { "paragraph": { "rich_text": [
                { "type":"text","text":{"content":"PR: TITLE → "}},
                { "type":"text","text":{"content":"URL","link":{"url":"URL"}}}
              ] } },
              { "paragraph": { "rich_text": [{ "type":"text","text":{"content":"SHA: SHA"}}] } },
              { "divider": {} }
            ]
          }
          JSON
          )
          BODY=${BODY//REPO/${{ github.repository }}}
          BODY=${BODY//STATUS/$STATUS}
          BODY=${BODY//TITLE/${{ github.event.pull_request.title }}}
          BODY=${BODY//URL/${{ github.event.pull_request.html_url }}}
          BODY=${BODY//SHA/${{ github.sha }}}
          curl -sS "https://api.notion.com/v1/blocks/${NOTION_PAGE_ID}/children" \
            -H "Authorization: Bearer ${NOTION_TOKEN}" \
            -H "Notion-Version: 2022-06-28" \
            -H "Content-Type: application/json" \
            -X PATCH \
            --data "${BODY}" \
            | jq -e '.object' >/dev/null
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_PAGE_ID: ${{ secrets.NOTION_PAGE_ID }}

      # 3) Optional: Notion DB sync (runs on schedule/dispatch only)
      - name: Sync flagged tasks from Notion DB (schedule/dispatch)
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          set -euo pipefail
          # Example: list first 5 items where "Sync to GitHub" is true (adjust property names if needed)
          QUERY='{
            "page_size": 5,
            "filter": {
              "property": "Sync to GitHub",
              "checkbox": { "equals": true }
            }
          }'
          curl -sS "https://api.notion.com/v1/databases/${NOTION_DATABASE_ID}/query" \
            -H "Authorization: Bearer ${NOTION_TOKEN}" \
            -H "Notion-Version: 2022-06-28" \
            -H "Content-Type: application/json" \
            -d "$QUERY" \
            | jq '.results[] | {id: .id, title: .properties.Name.title[0].plain_text}'
          # TODO: create/update GitHub issues here if needed
          # Use $GITHUB_TOKEN for repo writes; example (commented):
          # curl -sS -H "Authorization: Bearer ${GITHUB_TOKEN}" \
          # -H "Accept: application/vnd.github+json" \
          # https://api.github.com/repos/${{ github.repository }}/issues \
          # -d '{"title":"Example issue from Notion","body":"…"}' >/dev/null
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
