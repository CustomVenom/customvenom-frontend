name: PR Smokes + Notion Sync

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  build_and_sync:
    runs-on: ubuntu-latest
    env:
      NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
      NOTION_PAGE_ID: ${{ secrets.NOTION_PAGE_ID }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '22' }
      
      - name: Run Build & Type Checks (if PR is open)
        id: checks
        if: github.event.pull_request.state == 'open'
        run: |
          echo "[Running] Running frontend checks"
          
          # Install dependencies
          npm ci || npm i
          
          # Test 1: TypeScript compilation
          echo "=== Test 1: TypeScript ==="
          if npx tsc --noEmit; then
            echo "[OK] TypeScript compiles"
            TEST1="PASS"
          else
            echo "[FAIL] TypeScript errors"
            TEST1="FAIL"
          fi
          
          # Test 2: Next.js build
          echo "=== Test 2: Next.js Build ==="
          if npm run build; then
            echo "[OK] Next.js builds"
            TEST2="PASS"
          else
            echo "[FAIL] Build failed"
            TEST2="FAIL"
          fi
          
          # Test 3: Linting (optional, don't fail on this)
          echo "=== Test 3: Linting ==="
          if npm run lint 2>/dev/null || echo "No lint script"; then
            echo "[OK] Lint check"
            TEST3="PASS"
          else
            echo "[WARN] Lint warnings"
            TEST3="WARN"
          fi
          
          # Overall status
          if [ "$TEST1" = "PASS" ] && [ "$TEST2" = "PASS" ]; then
            OVERALL="[OK] ALL CHECKS PASS"
            STATUS_EMOJI="[OK]"
          else
            OVERALL="[FAIL] SOME CHECKS FAILED"
            STATUS_EMOJI="[FAIL]"
          fi
          
          echo "overall_status=${OVERALL}" >> $GITHUB_OUTPUT
          echo "status_emoji=${STATUS_EMOJI}" >> $GITHUB_OUTPUT
          echo "test1=${TEST1}" >> $GITHUB_OUTPUT
          echo "test2=${TEST2}" >> $GITHUB_OUTPUT
          echo "test3=${TEST3}" >> $GITHUB_OUTPUT

      - name: Post to Notion
        if: always()
        run: |
          PR_STATE="${{ github.event.pull_request.state }}"
          PR_MERGED="${{ github.event.pull_request.merged }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          REPO="${{ github.repository }}"
          SHA="${{ github.sha }}"
          
          # Determine PR status
          if [ "${PR_STATE}" = "closed" ] && [ "${PR_MERGED}" = "true" ]; then
            STATUS="[OK] Merged"
          elif [ "${PR_STATE}" = "closed" ]; then
            STATUS="[CLOSED] Closed"
          else
            STATUS="[OPEN] Open"
          fi
          
          # Build check results (if tests ran)
          if [ "${{ steps.checks.outcome }}" = "success" ]; then
            CHECK_RESULTS="

Build Checks: ${{ steps.checks.outputs.status_emoji }} ${{ steps.checks.outputs.overall_status }}
• TypeScript: ${{ steps.checks.outputs.test1 }}
• Next.js Build: ${{ steps.checks.outputs.test2 }}
• Linting: ${{ steps.checks.outputs.test3 }}
"
          else
            CHECK_RESULTS="

Build checks skipped (PR closed or checks failed to run)
"
          fi
          
          # Post to Notion
          BODY=$(cat <<'EOF'
          {
          "children": [
          { "heading_3": { "rich_text": [ { "type":"text","text":{"content":"PR_TITLE_VAL"} } ] } },
          { "paragraph": { "rich_text": [
          { "type":"text","text":{"content":"STATUS_VAL  •  " } },
          { "type":"text","text":{"content":"View PR","link":{"url":"PR_URL_VAL"} } }
          ] } },
          { "paragraph": { "rich_text": [ { "type":"text","text":{"content":"Repo: REPO_VAL"} } ] } },
          { "paragraph": { "rich_text": [ { "type":"text","text":{"content":"SHA: SHA_VAL"} } ] } },
          { "paragraph": { "rich_text": [ { "type":"text","text":{"content":"CHECK_RESULTS_VAL"} } ] } },
          { "divider": {} }
          ]
          }
          EOF
          )
          
          # Escape special characters for JSON
          CHECK_RESULTS_ESCAPED=$(echo "$CHECK_RESULTS" | sed 's/\\/\\\\/g; s/"/\\"/g')
          
          BODY=${BODY//REPO_VAL/"${REPO}"}
          BODY=${BODY//STATUS_VAL/"${STATUS}"}
          BODY=${BODY//PR_TITLE_VAL/"${PR_TITLE}"}
          BODY=${BODY//PR_URL_VAL/"${PR_URL}"}
          BODY=${BODY//SHA_VAL/"${SHA}"}
          BODY=${BODY//CHECK_RESULTS_VAL/"${CHECK_RESULTS_ESCAPED}"}
          
          echo "Posting to Notion page: ${NOTION_PAGE_ID}"
          
          RESPONSE=$(curl -sS "https://api.notion.com/v1/blocks/${NOTION_PAGE_ID}/children" \
            -H "Authorization: Bearer ${NOTION_TOKEN}" \
            -H "Notion-Version: 2022-06-28" \
            -H "Content-Type: application/json" \
            -X PATCH \
            --data "${BODY}")
          
          if echo "$RESPONSE" | jq -e '.object == "list"' > /dev/null 2>&1; then
            echo "[OK] Posted to Notion successfully"
          else
            echo "[WARN] Notion response: $RESPONSE"
          fi

