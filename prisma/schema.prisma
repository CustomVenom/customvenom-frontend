// Prisma schema for authentication and user management
// Compatible with NextAuth.js adapter

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  // Business fields
  role          String    @default("free") // free | pro | team
  stripeCustomerId String? @unique
  subscriptionStatus String? // trial | active | paused | canceled
  tier          String?   // free | pro | team
  paidUntil     DateTime?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  preferences   UserPreferences?
  leagues       League[]
  events        AnalyticsEvent[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}

// User preferences (1:1 with User)
model UserPreferences {
  id                    String  @id @default(cuid())
  userId                String  @unique
  favoriteTeam          String?
  notificationSettings  Json?
  savedLineups          Json?
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// League imports (Yahoo, Sleeper, ESPN)
model League {
  id         String  @id @default(cuid())
  userId     String
  platform   String  // yahoo, sleeper, espn
  leagueId   String  // External league ID from platform
  leagueName String?
  roster     Json?   // Player IDs on user's team
  settings   Json?   // Scoring settings, roster spots
  lastSync   DateTime @default(now())
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([userId, platform, leagueId])
  @@index([userId])
}

// Analytics events - Enhanced for comprehensive tracking
model AnalyticsEvent {
  id         String   @id @default(cuid())
  userId     String?
  sessionId  String   // Required for session tracking
  eventType  String   // tool_used, risk_mode_changed, feature_interaction, etc.
  toolName   String?  // Start/Sit, FAAB, Decisions
  action     String?  // viewed, compare, calculate, etc.
  properties Json?    // Additional metadata
  demoMode   Boolean  @default(true)
  timestamp  DateTime @default(now())
  receivedAt DateTime @default(now()) // When server received it
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId, eventType])
  @@index([timestamp])
  @@index([sessionId])
  @@index([eventType, timestamp])
  @@index([toolName, timestamp])
}

// Hourly rollup for efficient analytics queries
model HourlyRollup {
  id               String   @id @default(cuid())
  hour             DateTime @unique // Start of hour (e.g., "2025-10-18 01:00:00")
  eventCounts      Json     // { "tool_used": 45, "cache_hit": 128, ... }
  toolUsage        Json     // { "Start/Sit": 23, "FAAB": 15, ... }
  riskDistribution Json     // { "protect": 12, "neutral": 18, "chase": 8 }
  uniqueSessions   Int      @default(0)
  totalEvents      Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([hour])
}

